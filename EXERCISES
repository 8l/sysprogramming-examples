H1 (2015-02-16):
Write a program that opens a file for writing, truncates it, if it already exists, creates it, if it does not exist and writes the squares of integral number 0..99 into lines. The lines are 4 characters wide plus linefeed as fifth character. The output should be created using low-level I/O (open, write, close,...) and starting with the last square.

H2 (2015-02-23):
Write a program that works like a simplified version of less or more:
* read a file from command line or stdin (both need to work)
* react to keyboard input
* support vi style or emacs style or arrow keys (most difficult) or multiple of those for line up / line down
* optional: support character forward/backward, page down / page up, beginning/end of file or more
* always react on a single key without waiting for return to be pressed, unless return is your key for some function
* use tcgetattr and tcsetattr, possibly ioctl

H3 (2015-03-02):
Write a program that starts a daemon process for calculating squares:
* main forks child
* child forks daemon
* child ends itself
* parent observes termination of child
* a named pipe is used to communicate from parent to daemon that child has ended (for example by sending an "S" for "start")
* the same named pipe can then be used to send numbers to the daemon
* it will write the squares of the numbers to a file (or another named pipe) given on the command line
* sending "Q" or "QUIT" terminates the daemon
* other non-numeric messages are ignored

H4 (2015-03-09)
Write a program that starts a daemon process.
* main forks child
* child forks daemon
* child exits
* parent observes termination of child
* a signal is used to communicate to daemon from parent that the child has terminated.
* daemon sends a signal back to parent that it has become active as daemon
* parent terminates on receipt of that signal
* hints: either use pgid or come up with some mechanism to communicate pid of daemon to parent.

H5 (2015-03-16)
Write a program that can run with the following options:
* my_prog -s sets up shared memory and semaphores
* my_prog -c cleans up shared memory and semaphores
* my_prog name < some_file reads shorts (byte pairs) from some_file and counts the frequencies of occurrences of values.
* these are accumulated in some shared memory structure, secured by semaphores.
* in the end the result including the calculations and counts of the current run of my_prog are shown. Entries with 0 occurrences may be suppressed.

H6 (2015-03-23)
Write a program that can run with a large number of files as command line arguments
* for each command line argument a thread is started that reads the file with that name.
* each thread reads shorts (byte pairs) from its file and counts the frequencies of occurrences of values.
* these are accumulated in some memory structure, secured by mutexes or rwlocks.
* in the end the result including the calculations and counts of the current run of my_prog are shown. Entries with 0 occurrences may be suppressed.

H7 (2015-04-27)
Write a program for MS-Windows (Win32 or Win64) that
* opens a file
* reads the file
* does a sleep of a few seconds
* closes the file again.
Depending on the command line arguments, the file is opened exclusively or sharable. The actual file can be hard coded or preferably be given as command line argument.
Run the program multiple times simultanously to see the effect of exclusive and sharable usage of a file.

H8 (2015-05-04)
Write a program for MS-Windows like H6
The program that can run with a large number of files as command line arguments
* for each command line argument a thread is started that reads the file with that name.
* each thread reads shorts (byte pairs) from its file and counts the frequencies of occurrences of values.
* these are accumulated in some memory structure, secured by critical section, mutexes, semaphores or rwlocks.
* in the end the result including the calculations and counts of the current run of my_prog are shown. Entries with 0 occurrences may be suppressed.
