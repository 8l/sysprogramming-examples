#!/usr/bin/ruby

# calculate data for metric function for fsort for binary files
# because of its arbitrary long integer, ruby is better for this than perl

# /* how often do given byte values occur in typical executable binary files (taken from /usr/bin)? */
binary_byte_count = [ 207059223, 10124271,  5166309,  3843289,  4245729,  4293868,  1771579,  1847228,   
                      5452286,  1331936,  2398333,  1379059,  1397002,  1192199,  4884078,  9316287,   
                      4668677,   934628,  1186935,   715390,  1375870,  1074543,   628673,  1158625,   
                      2932591,   572600,   546600,   501615,   981199,   592116,   520894,  2953651,   
                      12643026,   898935,   963689,   771939, 11803808,  1378336,   596333,   868292,   
                      2934133,  1751707,   805172,   572216,  1305354,  1313105,  2447518,  1069802,   
                      2864039,  3807780,  1139233,   891687,  1211563,  1294378,   809474,   682632,   
                      1877984,  1729864,  1084647,  1117751,  1096989,  1349510,   563642,   582210,   
                      3251289,  7324753,  2433057,  2314447,  5978076,  9074391,  1299307,  1403967,   
                      25815366,  4865014,   812967,   914110,  6670217,  1870346,  1775301,  1400804,   
                      2521895,   792318,  1570867,  2543127,  2628572,  1650403,  1049658,   990401,   
                      1241831,   640727,   682269,  1092521,  1520637,  1121049,   684743,  5245111,   
                      1291413,  4421941,  1664138,  3913940,  3620681,  6923932,  4352764,  1867528,   
                      2223560,  4465834,   520913,   939607,  4385524,  2162222,  4617786,  4031284,   
                      3014483,   501842,  4963924,  4472462,  8135123,  3520052,  1449718,  1137382,   
                      1664854,  1120629,   557034,   867370,  1610105,   829927,   581444,   611868,   
                      2235852,  1011336,   564300,  5844408,  4705586,  4610849,   984826,   615623,   
                      1187677, 14627408,   491927, 11026817,  1184232,  5471578,   725023,   755505,   
                      1462013,   392677,   429187,   425237,   887069,   609790,   406777,   383887,   
                      754540,   362599,   368855,   353008,   519767,   360716,   347706,   367328,   
                      840853,   327680,   376018,   373841,   463693,   343515,   409549,   358728,   
                      801064,   342812,   436662,   367754,   558490,   321990,   324123,   379326,   
                      816721,   351589,   362392,   376347,   736462,   422170,  1150659,   707705,   
                      1414724,   849932,  1395852,   519543,  1086139,   491563,  1819648,  1139191,   
                      4355573,  1880747,  1100096,  1964779,  1380673,  1003427,  1569712,  2881644,   
                      960825,   951041,   559682,   433018,   517092,   463789,   476157,   439558,   
                      1173610,   588985,  1193384,   504787,   497007,   539327,   524822,   452205,   
                      1123584,   460902,   506357,   712950,   511484,   473275,   653174,  1726437,   
                      1401843,   626589,   744526,   568197,   703566,   552659,   749596,   860595,   
                      8102787,  2986334,   761643,  1558424,  1028793,   905397,   867451,  1290987,   
                      2038501,   670664,  1095208,   814119,   614252,   670354,  1548360,  1041605,   
                      1885445,   929025,  1032897,  1250163,  1244361,  1433448,  2618042, 22596132 ];

# give some minimal value to the non-printable characters
binary_byte_count_printable_prefered = [ ];

binary_accumulated_count = [];

binary_printable_preferred_accumulated_count = [];

factors_all = [];

factors_printable_pref = [];

XA  = 'A'.getbyte(0)
XZ  = 'Z'.getbyte(0)
N0 = '0'.getbyte(0)
N9 = '9'.getbyte(0)
Xa = 'a'.getbyte(0)
Xz = 'z'.getbyte(0)
En = "\240".getbyte(0) # nobreakspace
Ey = "\377".getbyte(0) # y-umlaut

def is_string_char(c)
  b = c.getbyte(0)
  is_string_byte(b)
end

def is_string_byte(b)
  return (XA <= b && b <= XZ || N0 <= b && b <= N9 || Xa <= b && b <= Xz || En <= b && b <= Ey)
end

printable_sum = 0
non_printable_count = 0
256.times do |b|
  if (is_string_byte(b))
    val = binary_byte_count[b];
    printable_sum += val;
  else
    non_printable_count += 1
  end
end

puts("printable_sum=#{printable_sum} non_printable_count=#{non_printable_count}\n")

# assuming n=non_printable_count, p=printable_sum, s=2^16
# we now need a minimal value v for the non-printable characters such that
# 1/s <= v/(n*v+p)
# hence
# s * v >= n * v + p
# (s - n) * v >= p
# n < s can be assumed for sure (is < 256 indeed)
# v >= p / (s - n)
# or with integral division in Ruby:
# v = (p + s - n - 1) / (s - n)

s = 2**16
v = (printable_sum + s - non_printable_count - 1) / (s - non_printable_count)
puts("s=#{s} v=#{v}")
puts()
puts("binary_byte_count_printable_prefered:")
puts("------------------------------------------------------------")
256.times do |b|
  if (is_string_byte(b))
    binary_byte_count_printable_prefered[b] = binary_byte_count[b]
  else
    binary_byte_count_printable_prefered[b] = v
  end
  print(sprintf(" %12d,", binary_byte_count_printable_prefered[b]))
  if (b % 8 == 7)
    puts
  end
end
puts("------------------------------------------------------------")

puts()
puts("binary_accumulated_count:")
puts("------------------------------------------------------------")
partial_sum_all = 0
256.times do |b|
  binary_accumulated_count[b] = partial_sum_all
  partial_sum_all += binary_byte_count[b]
  print(sprintf(" %12d,", binary_accumulated_count[b]))
  if (b % 8 == 7)
    puts
  end
end
puts("------------------------------------------------------------")
# now it is the total
total_sum_all = partial_sum_all

puts()
puts("binary_printable_preferred_accumulated_count:")
puts("------------------------------------------------------------")
partial_sum_prt = 0
256.times do |b|
  binary_printable_preferred_accumulated_count[b] = partial_sum_prt
  partial_sum_prt += binary_byte_count_printable_prefered[b]
  print(sprintf(" %12d,", binary_printable_preferred_accumulated_count[b]))
  if (b % 8 == 7)
    puts
  end
end
puts("------------------------------------------------------------")
# now it is the total
total_sum_prt = partial_sum_prt

puts()
puts("factors_all:")
puts("------------------------------------------------------------")
256.times do |b|
  factors_all[b] = binary_accumulated_count[b].to_f()/total_sum_all
  partial_sum_prt += binary_byte_count_printable_prefered[b]
  print(sprintf(" %16.14f,", factors_all[b]))
  if (b % 8 == 7)
    puts
  end
end
puts("------------------------------------------------------------")

puts()
puts("factors_printable_pref:")
puts("------------------------------------------------------------")
256.times do |b|
  factors_printable_pref[b] = binary_printable_preferred_accumulated_count[b].to_f()/total_sum_prt
  partial_sum_prt += binary_byte_count_printable_prefered[b]
  print(sprintf(" %16.14f,", factors_printable_pref[b]))
  if (b % 8 == 7)
    puts
  end
end
puts("------------------------------------------------------------")

  
